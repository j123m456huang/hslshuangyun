#include	<signal.h>
#include	<unistd.h>
#include	<sys/types.h>
#include	<sys/wait.h>
#include	<pthread.h>
#include	"uemf.h"
#include 	"wsIntrn.h"
#include 	"web.h"
#include"../ginclude/function.h"
#include"../ginclude/hardware.h"

#ifdef __WEB__
#ifdef __WEB_GOAHEAD__

#include 	"../ginclude/gendian.h"
#ifdef WEBS_SSL_SUPPORT
#include	"websSSL.h"
#endif

#ifdef USER_MANAGEMENT_SUPPORT
#include	"um.h"
void	formDefineUserMgmt( void );
#endif

#define SERVER_PORT_RETRYES 5
//#define SERVER_WEB_ROOT 		"/system/www"

void WebReadParam(char *user0,char *passwd0,
					   char *user1,char *passwd1,
					   char *user2,char *passwd2,
					   char *ipaddr,int *webport);

extern void SystemGetTpid(char * strfunc);

//=============================================
//auth:zxh
//date:2013-4-9
//function:set telnet passwd
//param:passwd for telnet
//=============================================
void CreateTelnetPasswd( char *passwd)
{
	FILE *fp = NULL;
	char  temp[128];

	fp = fopen( "/etc/passwd", "wb" );
	if( fp == NULL )
	{
		return;
	}
	memset( temp, 0x00, 128 );
	#if 1
	//object
	strcpy( temp, "root:LSiuY7pOmZG2s:0:0:Administrator:/:/bin/sh\n" );
	//vstar
	//strcpy( temp, "root:OYZVRABjiXqqQ:0:0:Adminstrator:/:/bin/sh" );
	#else
	strcpy(temp,passwd);
	#endif
	fwrite( temp, 1, strlen( temp ), fp );
	fclose( fp );
	//root:x:0:admin
	fp = fopen( "/etc/group", "wb" );

	if( fp == NULL )
	{
		return;
	}
	memset( temp, 0x00, 128 );
	strcpy( temp, "root:x:0:admin" );
	fwrite( temp, 1, strlen( temp ), fp );
	fclose( fp );
}
//=============================================
//auth:zxh
//date:2013-4-9
//function:web debug
//param:pbuf cmd
//=============================================
void webdebug( char *pbuf, int cmd )
{
#ifdef WEBDEBUG
	FILE *fp = NULL;
	if( cmd == 0x00 )
	{
		fp = fopen( "/tmp/web.txt", "ab+" );

		if( fp == NULL )
		{
			printf( "live dbg file open failed\n" );
			return;
		}
	}
	else
	{
		fp = fopen( "/tmp/web.txt", "wb" );

		if( fp == NULL )
		{
			printf( "live dbg file open failed\n" );
			return;
		}
	}
	fwrite( pbuf, 1, strlen( pbuf ), fp );
	fclose( fp );
#endif
}
//=============================================
//auth:zxh
//date:2013-4-9
//function:asp test handle
//param:pbuf cmd
//=============================================
static int aspTest( int eid, webs_t wp, int argc, char_t **argv )
{
	char_t	*name, *address;

	if( ejArgs( argc, argv, T( "%s %s" ), &name, &address ) < 2 )
	{
		websError( wp, 400, T( "Insufficient args\n" ) );
		return -1;
	}

	return websWrite( wp, T( "Name: %s, Address %s" ), name, address );
}
//=============================================
//auth:zxh
//date:2013-4-9
//function:form test handle
//param:pbuf cmd
//=============================================
static void formTest( webs_t wp, char_t *path, char_t *query )
{
	char_t	*name, *address;

	name = websGetVar( wp, T( "name" ), T( "Joe Smith" ) );
	address = websGetVar( wp, T( "address" ), T( "1212 Milky Way Ave." ) );

	websHeader( wp );
	websWrite( wp, T( "<body><h2>Name: %s, Address: %s</h2>\n" ), name, address );
	websFooter( wp );
	websDone( wp, 200 );
}
//=============================================
//auth:zxh
//date:2013-4-9
//function:web home page handler
//param:pbuf cmd
//=============================================
static int websHomePageHandler( webs_t wp, char_t *urlPrefix, char_t *webDir,
								int arg, char_t *url, char_t *path, char_t *query )
{
	/*
	 *	If the empty or "/" URL is invoked, redirect default URLs to the home page
	 */
	if( *url == '\0' || gstrcmp( url, T( "/" ) ) == 0 )
	{
		websRedirect( wp, T( "index.htm" ) );
		return 1;
	}

	return 0;
}
//=============================================
//auth:zxh
//date:2013-4-9
//function:default error handler
//param:pbuf cmd
//=============================================
void defaultErrorHandler( int etype, char_t *msg )
{
#if 0
	write( 1, msg, gstrlen( msg ) );
#endif
}
//=============================================
//auth:zxh
//date:2013-4-9
//function:default trace handler
//param:pbuf cmd
//=============================================
void defaultTraceHandler( int level, char_t *buf )
{
}
//=============================================
//auth:zxh
//date:2013-4-9
//function:cgi comm name
//param:pbuf cmd
//=============================================
char_t *websGetCgiCommName()
{
	char_t	*pname1, *pname2;

	printf( "cgi\n" );
	pname1 = tempnam( NULL, T( "cgi" ) );
	pname2 = bstrdup( B_L, pname1 );
	free( pname1 );
	return pname2;
}
//=============================================
//auth:zxh
//date:2013-4-9
//function:webs launch cgi proc
//param:pbuf cmd
//=============================================
int websLaunchCgiProc( char_t *cgiPath, char_t **argp, char_t **envp,
					   char_t *stdIn, char_t *stdOut )
{
	int	pid, fdin, fdout, hstdin, hstdout, rc;

	fdin = fdout = hstdin = hstdout = rc = -1;

	if( ( fdin = open( stdIn, O_RDWR | O_CREAT, 0666 ) ) < 0 ||
		( fdout = open( stdOut, O_RDWR | O_CREAT, 0666 ) ) < 0 ||
		( hstdin = dup( 0 ) ) == -1 ||
		( hstdout = dup( 1 ) ) == -1 ||
		dup2( fdin, 0 ) == -1 ||
		dup2( fdout, 1 ) == -1 )
	{
		goto DONE;
	}

	rc = pid = fork();

	if( pid == 0 )
	{
		/*
		 *		if pid == 0, then we are in the child process
		 */
		if( execve( cgiPath, argp, envp ) == -1 )
		{
			printf( "content-type: text/html\n\n"
					"Execution of cgi process failed\n" );
		}
		printf("===websLaunchCgiProc===\n");
		exit( 0 );
	}

DONE:

	if( hstdout >= 0 )
	{
		dup2( hstdout, 1 );
		close( hstdout );
	}

	if( hstdin >= 0 )
	{
		dup2( hstdin, 0 );
		close( hstdin );
	}

	if( fdout >= 0 )
	{
		close( fdout );
	}

	if( fdin >= 0 )
	{
		close( fdin );
	}

	return rc;
}
//=============================================
//auth:zxh
//date:2013-4-9
//function:webs check cgi proc
//param:pbuf cmd
//=============================================
int websCheckCgiProc( int handle )
{
	/*
	 *	Check to see if the CGI child process has terminated or not yet.
	 */
	if( waitpid( handle, NULL, WNOHANG ) == handle )
	{
		return 0;
	}
	else
	{
		return 1;
	}
}
//=============================================
//auth:zxh
//date:2013-4-9
//function:web run
//param:pbuf cmd
//=============================================
void *WebThreadProc( void *p )
{
	WebInit();
#ifdef WEBS_SSL_SUPPORT
	websSSLOpen();
#endif
	SystemGetTpid("WebThreadProc");
	while(1)
	{
		if( socketReady( -1 ) || socketSelect( -1, 4000 ) )
		{
			socketProcess( -1 );
		}
		websCgiCleanup();
		emfSchedProcess();
	}
#ifdef WEBS_SSL_SUPPORT
	websSSLClose();
#endif

#ifdef USER_MANAGEMENT_SUPPORT
	umClose();
#endif
	websCloseServer();
	socketClose();
#ifdef B_STATS
	memLeaks();
#endif
	bclose();
	return 0;
}
//=============================================
//auth:zxh
//date:2013-4-9
//function:web run
//param:pbuf cmd
//=============================================
int WebCheckParam(int webport){
	int iRet = 0;
	
	if (webport < 1){
		iRet = -1;
	}
	return iRet;
}
//=============================================
//auth:zxh
//date:2013-4-9
//function:web init
//param:
//=============================================
 int WebInit(void)
{
	struct in_addr		intaddr;
	char				host[128], dir[128], webdir[128];
	char				*cp;
	char_t				wbuf[128];
	char				admu[32];
	char				admp[32];
	char				ipaddr[16];
	char				user0[32];
	char				user1[32];
	char				user2[32];
	char				passwd0[32];
	char				passwd1[32];
	char				passwd2[32];
	int					webport; 
	int					iRet;

	memset( ipaddr, 0x00, 16);
	memset( user0, 0x00, 32);
	memset( user1,0x00, 32);
	memset( user2,0x00, 32 );
	memset( passwd0,0x00, 32 );
	memset( passwd1,0x00, 32);
	memset( passwd2, 0x00, 32 );

	//CreateTelnetPasswd(NULL);
	
	WebReadParam(user0,passwd0,user1,passwd1,user2,passwd2,ipaddr,&webport);
	printf("web0===%d===\n",webport);
	if (webport >= 0x100){
		//webport = htonet(webport);
	}
	printf("web1===%d===\n",webport);
	iRet = WebCheckParam(webport);
	if (iRet){
		return -1;
	}
	bopen( NULL, ( 60 * 1024 ), B_USE_MALLOC );
	socketOpen();
#ifdef USER_MANAGEMENT_SUPPORT
	umOpen();
	umAddGroup( T( "adm" ), 0x07, AM_DIGEST, FALSE, FALSE );
	memset( admu, 0x00, 32 );
	memset( admp, 0x00, 32 );
	sprintf( admu, "%s", user0 );
	sprintf( admp, "%s", passwd0);
	umAddUser( admu, admp, T( "adm" ), FALSE, FALSE );
	memset( admu, 0x00, 32 );
	memset( admp, 0x00, 32 );
	sprintf( admu, "%s", user1);
	sprintf( admp, "%s", passwd1);
	umAddUser( admu, admp, T( "adm" ), FALSE, FALSE );
	memset( admu, 0x00, 32 );
	memset( admp, 0x00, 32 );
	sprintf( admu, "%s", user2);
	sprintf( admp, "%s", passwd2);
	umAddUser( admu, admp, T( "adm" ), FALSE, FALSE );
	umAddAccessLimit( T( "/" ), AM_DIGEST, FALSE, T( "adm" ) );
#endif
	intaddr.s_addr = inet_addr( ipaddr );
	getcwd( dir, sizeof( dir ) );
	if( ( cp = strrchr( dir, '/' ) ) )
	{
		*cp = '\0';
	}
	sprintf( webdir, "%s/%s", dir, SERVER_WEB_ROOT );
	memset( wbuf, 0x00, 128 );
	memset( host, 0x00, 128 );
	websSetDefaultDir( webdir );
	cp = inet_ntoa( intaddr );
	ascToUni( wbuf, cp, min( strlen( cp ) + 1, sizeof( wbuf ) ) );
	websSetIpaddr( wbuf );
	ascToUni( wbuf, host, min( strlen( host ) + 1, sizeof( wbuf ) ) );
	websSetHost( wbuf );
	websSetDefaultPage( T( "index.htm" ) );
	websSetPassword( "");

	websOpenServer( webport, SERVER_PORT_RETRYES );
	websUrlHandlerDefine( T( "" ), NULL, 0, websSecurityHandler, WEBS_HANDLER_FIRST );
	websUrlHandlerDefine( T( "/goform" ), NULL, 0, websFormHandler, 0 );
	websUrlHandlerDefine( T( "/cgi-bin" ), NULL, 0, websCgiHandler, 0 );
	websUrlHandlerDefine( T( "" ), NULL, 0, websDefaultHandler,
						  WEBS_HANDLER_LAST );

	websAspDefine( T( "aspTest" ), aspTest );
	websFormDefine( T( "formTest" ), formTest );
#ifdef USER_MANAGEMENT_SUPPORT
	formDefineUserMgmt();
#endif
	websUrlHandlerDefine( T( "/" ), NULL, 0, websHomePageHandler, 0 );
	printf("======web init============%d\n",webport);
	return 0;
}
//=============================================
//auth:zxh
//date:2013-4-9
//function:web run
//param:
//=============================================
void WebThread( void )
{
	pthread_t ntpthread;
	pthread_create( &ntpthread, NULL, WebThreadProc, NULL );
	//WebServer();
}
#endif
#endif
